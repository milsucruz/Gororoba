@rendermode InteractiveServer
@inject MenuStateService MenuState
@inject NavigationManager NavigationManager

<div class="navigation @(MenuState.IsCollapsed ? "active" : "")">
    <ul>
        <li class="@GetActiveClass("")">
            <a href="">
                <span class="iconSpan"><i class="bi bi-house"></i></span>
                <span class="btnNav">Home</span>
            </a>
        </li>

        <li class="@GetActiveClass("supplier")">
            <a href="supplier">
                <span class="iconSpan"><i class="bi bi-truck"></i></span>
                <span class="btnNav">Fornecedores</span>
            </a>
        </li>

        <li class="@GetActiveClass("funcionarios")">
            <a href="funcionarios">
                <span class="iconSpan"><i class="bi bi-person-square"></i></span>
                <span class="btnNav">Funcionários</span>
            </a>
        </li>
    </ul>
</div>

@code {
    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += (_, __) => InvokeAsync(StateHasChanged);
        MenuState.OnChange += StateHasChanged;
    }

    private Task OnMenuChanged()
    {
        InvokeAsync(StateHasChanged);
        return Task.CompletedTask;
    }

    private string GetActiveClass(string href)
    {
        var currentUri = NavigationManager.Uri;
        var relativePath = NavigationManager.ToBaseRelativePath(currentUri).TrimEnd('/');

        if (string.IsNullOrWhiteSpace(relativePath) && string.IsNullOrWhiteSpace(href))
            return "hovered";

        return relativePath.Equals(href.TrimEnd('/'), StringComparison.OrdinalIgnoreCase)
            ? "hovered"
            : "";
    }
}
